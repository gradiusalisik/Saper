{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cx","classNames","bind","styles","QUANTITYBOMB","SIZE","row","col","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getGrid","grid","cols","push","isBomb","isOpen","numberAround","stateRightClick","hasBomb","cell","state","getQuantityBomb","_ref","rowId","colId","quantity","inRange","getNumbers","newGrid","toConsumableArray","map","setState","getBombs","_this$state","quantityBomb","i","bombsDot","Math","floor","random","gameOver","handleStart","openCell","prevState","quantityOpen","checkIsOpen","openCellAround","openBox","handleClick","getStateRightClick","_this$state2","quantityFlagBomb","handleClickContextMenu","e","preventDefault","handleClickContextGrid","setReload","isReload","seconds","clearInterval","timerID","handleRestart","objectSpread","initialState","tick","isStoppedTimer","setInterval","correctValueFormat","value","concat","transformTime","minutes","sec","_this2","_this$state3","isWinner","_this$transformTime","react_default","a","createElement","className","onContextMenu","grid_gameOver","type","onClick","key","defineProperty","cell_isBomb","cell_isOpen","cell_flag","cell_question","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1af79ab4.chunk.js","sourcesContent":["/* eslint-disable react/no-unused-state */\n/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { Component } from 'react';\nimport classNames from 'classnames/bind';\nimport styles from './App.css';\n\nconst cx = classNames.bind(styles);\n\nconst QUANTITYBOMB = 10;\nconst SIZE = {\n  row: 9,\n  col: 9,\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.initialState = {\n      grid: this.getGrid(),\n      quantityFlagBomb: QUANTITYBOMB,\n      quantityBomb: QUANTITYBOMB,\n      // eslint-disable-next-line react/no-unused-state\n      // Не понял как победить эту ошибку\n      gameOver: false,\n      quantityOpen: 0,\n      isReload: false,\n      isStoppedTimer: true,\n      seconds: 0,\n    };\n\n    this.state = this.initialState;\n  }\n\n  componentWillMount() {\n    this.getBombs();\n    this.getNumbers();\n  }\n\n  componentDidUpdate() {\n    const { isReload } = this.state;\n    if (isReload) {\n      this.setReload();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  getGrid = () => {\n    const grid = [];\n    for (let row = 0; row < SIZE.row; row += 1) {\n      const cols = [];\n      for (let col = 0; col < SIZE.col; col += 1) {\n        cols.push({\n          row,\n          col,\n          isBomb: false,\n          isOpen: false,\n          numberAround: '',\n          stateRightClick: '',\n        });\n      }\n      grid.push(cols);\n    }\n\n    return grid;\n  }\n\n  hasBomb = (cell) => {\n    const { grid } = this.state;\n    return grid[cell.row][cell.col].isBomb;\n  };\n\n  getQuantityBomb = ({ rowId, colId }) => {\n    let quantity = 0;\n\n    for (let row = rowId - 1; row <= rowId + 1; row += 1) {\n      for (let col = colId - 1; col <= colId + 1; col += 1) {\n        if (this.inRange({ row, col })) {\n          if (this.hasBomb({ row, col })) {\n            quantity += 1;\n          }\n        }\n      }\n    }\n\n    return quantity;\n  }\n\n  getNumbers = () => {\n    const { grid } = this.state;\n    const newGrid = [...grid];\n\n    // Не понял как победить эту ошибку( нужно чтобы был ретурн, но ретурн мне тут не нужен)\n    // eslint-disable-next-line array-callback-return\n    newGrid.map((row, rowId) => row.map((cell, colId) => {\n      if (cell.isBomb) {\n        this.setState({\n          numberAround: '',\n        });\n      } else {\n        const quantity = this.getQuantityBomb({ rowId, colId });\n        // Находим количество бомб вокруг и мутируем, проставляя цифру.\n        newGrid[rowId][colId].numberAround = quantity;\n      }\n    }));\n\n    this.setState({\n      grid: newGrid,\n    });\n  }\n\n  getBombs = () => {\n    const { grid, quantityBomb } = this.state;\n    const newGrid = [...grid];\n    for (let i = 0; i < quantityBomb; i += 1) {\n      let bombsDot = {\n        row: 0,\n        col: 0,\n      };\n\n      do {\n        bombsDot = {\n          row: Math.floor(Math.random() * 9),\n          col: Math.floor(Math.random() * 9),\n        };\n      } while (newGrid[bombsDot.row][bombsDot.col].isBomb);\n\n      // Ищет нужный объект на секте row, col и потом мутируем ключ ставя бомбу.\n      newGrid[bombsDot.row][bombsDot.col].isBomb = true;\n    }\n\n    this.setState({\n      grid: newGrid,\n    });\n  }\n\n  gameOver = () => {\n    const { grid } = this.state;\n    const newGrid = [...grid];\n\n    // eslint-disable-next-line array-callback-return\n    newGrid.map((row, rowId) => row.map((cell, colId) => {\n      if (cell.isBomb) {\n        // Находим все бомбы и открываем их\n        newGrid[rowId][colId].isOpen = true;\n      }\n    }));\n    this.handleStart();\n\n    this.setState({\n      // eslint-disable-next-line react/no-unused-state\n      gameOver: true,\n      grid: newGrid,\n    });\n  }\n\n  openCell = (cell) => {\n    const { grid } = this.state;\n    const newGrid = [...grid];\n\n    newGrid[cell.row][cell.col].isOpen = true;\n\n    this.setState(prevState => ({\n      grid: newGrid,\n      quantityOpen: prevState.quantityOpen + 1,\n    }));\n  }\n\n  checkIsOpen = (cell) => {\n    const { grid } = this.state;\n\n    return grid[cell.row][cell.col].isOpen;\n  }\n\n  // eslint-disable-next-line consistent-return\n  openCellAround = (cell) => {\n    const { grid } = this.state;\n    this.openCell(cell);\n    for (let row = cell.row - 1; row <= cell.row + 1; row += 1) {\n      for (let col = cell.col - 1; col <= cell.col + 1; col += 1) {\n        if (this.inRange({ row, col })) {\n          if (!this.checkIsOpen({ row, col })) {\n            this.openBox(grid[row][col]);\n          }\n        }\n      }\n    }\n  }\n\n  inRange = cell => cell.row >= 0 && cell.row < SIZE.row && cell.col >= 0 && cell.col < SIZE.col\n\n  // eslint-disable-next-line consistent-return\n  openBox = (cell) => {\n    if (cell.stateRightClick === 'flag' || cell.isOpen) {\n      return false;\n    }\n    if (cell.isBomb) {\n      this.gameOver();\n      this.openCell(cell);\n    }\n    if (cell.numberAround) {\n      this.openCell(cell);\n    }\n\n    if (!cell.numberAround && !cell.isBomb) {\n      this.openCellAround(cell);\n    }\n  }\n\n  handleClick = cell => () => {\n    this.handleStart();\n    this.openBox(cell);\n  }\n\n  getStateRightClick = (cell) => {\n    const { grid, quantityFlagBomb } = this.state;\n    const newGrid = [...grid];\n\n    switch (cell.stateRightClick) {\n      case '':\n        if (quantityFlagBomb > 0 && !this.checkIsOpen(cell)) {\n          newGrid[cell.row][cell.col].stateRightClick = 'flag';\n          this.setState(state => ({\n            grid: newGrid,\n            quantityFlagBomb: state.quantityFlagBomb === 0 ? 0 : state.quantityFlagBomb - 1,\n          }));\n        }\n        break;\n      case 'flag':\n        newGrid[cell.row][cell.col].stateRightClick = 'question';\n        this.setState(state => ({\n          grid: newGrid,\n          quantityFlagBomb: state.quantityFlagBomb >= QUANTITYBOMB\n            ? QUANTITYBOMB\n            : state.quantityFlagBomb + 1,\n        }));\n        break;\n      case 'question':\n        newGrid[cell.row][cell.col].stateRightClick = '';\n        this.setState({\n          grid: newGrid,\n        });\n        break;\n      default:\n        newGrid[cell.row][cell.col].stateRightClick = '';\n        this.setState({\n          grid: newGrid,\n        });\n        break;\n    }\n  }\n\n  handleClickContextMenu = cell => (e) => {\n    e.preventDefault();\n    this.getStateRightClick(cell);\n  }\n\n  handleClickContextGrid = (e) => {\n    e.preventDefault();\n    return false;\n  }\n\n  setReload = () => {\n    this.setState({\n      isReload: false,\n      seconds: 0,\n    });\n    this.getBombs();\n    this.getNumbers();\n    clearInterval(this.timerID);\n  }\n\n  handleRestart = () => {\n    this.setState({\n      ...this.initialState,\n      grid: this.getGrid(),\n      isReload: true,\n    });\n  }\n\n  tick = () => {\n    this.setState(prevState => ({\n      seconds: prevState.seconds + 1,\n    }));\n  }\n\n  handleStart = () => {\n    const { isStoppedTimer } = this.state;\n    if (isStoppedTimer) {\n      this.timerID = setInterval(() => this.tick(), 1000);\n      this.setState({\n        isStoppedTimer: false,\n      });\n    } else {\n      clearInterval(this.timerID);\n      this.setState({\n        isStoppedTimer: true,\n      });\n    }\n  }\n\n  correctValueFormat = value => (value < 10 ? `0${value}` : value)\n\n  transformTime = () => {\n    const { seconds } = this.state;\n    const minutes = Math.floor((seconds % (60 * 60)) / 60);\n    const sec = Math.floor((seconds % 60));\n\n    return {\n      minutes: this.correctValueFormat(minutes),\n      seconds: this.correctValueFormat(sec),\n    };\n  }\n\n  render() {\n    const {\n      grid,\n      quantityBomb,\n      quantityFlagBomb,\n      gameOver,\n      quantityOpen,\n    } = this.state;\n\n    const isWinner = quantityOpen === (SIZE.row * SIZE.col) - quantityBomb;\n    const { minutes, seconds } = this.transformTime();\n\n    return (\n      <div className=\"app\">\n        <div className=\"game\" onContextMenu={this.handleClickContextGrid}>\n          <header className=\"header\">\n            <div className=\"header__bomb\">\n              <div className=\"header__flag\" />\n              <div className=\"header__bomb-quantity\">{quantityFlagBomb}</div>\n            </div>\n            <div className=\"header__timer-wrap\">\n              <div className=\"header__timer\">{minutes} : {seconds}</div>\n              <div className=\"header__timer-icon\" />\n            </div>\n          </header>\n          <section\n            className={cx('grid', {\n              grid_gameOver: gameOver || isWinner,\n            })}\n          >\n            <div className=\"stub\" />\n            {grid.map(row => (\n              row.map(cell => (\n                <button\n                  type=\"button\"\n                  onContextMenu={this.handleClickContextMenu(cell)}\n                  onClick={this.handleClick(cell)}\n                  key={`${cell.row} ${cell.col}`}\n                  className={cx('cell', {\n                    cell_isBomb: cell.isOpen && cell.isBomb,\n                    cell_isOpen: cell.isOpen,\n                    cell_flag: cell.stateRightClick === 'flag',\n                    cell_question: cell.stateRightClick === 'question',\n                    [`cell_number_${cell.numberAround}`]: cell.isOpen && cell.numberAround,\n                  })}\n                />\n              ))\n            ))}\n          </section>\n          <footer className=\"footer\">\n            {!gameOver && !isWinner && <div className=\"footer__begin\">Игра началась.</div>}\n            {gameOver && !isWinner\n              && (\n                <div className=\"footer__begin\">\n                  Игра закончилась.\n                  <button type=\"button\" onClick={this.handleRestart} className=\"footer__restart\" />\n                </div>\n              )}\n            {isWinner\n              && (\n                <div className=\"footer__begin\">\n                  Победа!\n                  <button type=\"button\" onClick={this.handleRestart} className=\"footer__restart\" />\n                </div>\n              )}\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n/* eslint-disable */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}